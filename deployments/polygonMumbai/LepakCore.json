{
  "address": "0x5e10e5e48c5Cf77eE95D289bec3c92C25926f6bE",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IWorldID",
          "name": "_worldId",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_membershipAddr",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidNullifier",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "new_price",
          "type": "uint256"
        }
      ],
      "name": "MembershipPriceUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address[]",
          "name": "new_mods",
          "type": "address[]"
        }
      ],
      "name": "ModsUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "member",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "NewMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "n_members",
          "type": "uint256"
        }
      ],
      "name": "NewTeam",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "UserInfoURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getMods",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "isMember",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "isMod",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "infoURI",
          "type": "string"
        }
      ],
      "name": "joinWithEth",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "infoURI",
          "type": "string"
        }
      ],
      "name": "joinWithoutEth",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "modLimit",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "mods",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_members",
          "type": "address[]"
        }
      ],
      "name": "payForTeam",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_newPrice",
          "type": "uint256"
        }
      ],
      "name": "setMembershipPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "_newMods",
          "type": "address[]"
        }
      ],
      "name": "setMods",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "usersPaid",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x15780d2a69dac419607fb639fcac8d159d1bac06c1fe471c2be4334479255f66",
  "receipt": {
    "to": null,
    "from": "0x4bdB8234AD81F26985d257F36a2d2d8c30365546",
    "contractAddress": "0x5e10e5e48c5Cf77eE95D289bec3c92C25926f6bE",
    "transactionIndex": 20,
    "gasUsed": "1166990",
    "logsBloom": "0x
    "blockHash": "0xea814f6d72ce8533b884c4f49c373b315a53ba5635bc99464bfa150dfd08b866",
    "transactionHash": "0x15780d2a69dac419607fb639fcac8d159d1bac06c1fe471c2be4334479255f66",
    "logs": [
      {
        "transactionIndex": 20,
        "blockNumber": 28147650,
        "transactionHash": "0x15780d2a69dac419607fb639fcac8d159d1bac06c1fe471c2be4334479255f66",
        "address": "0x5e10e5e48c5Cf77eE95D289bec3c92C25926f6bE",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004bdb8234ad81f26985d257f36a2d2d8c30365546"
        ],
        "data": "0x",
        "logIndex": 86,
        "blockHash": "0xea814f6d72ce8533b884c4f49c373b315a53ba5635bc99464bfa150dfd08b866"
      },
      {
        "transactionIndex": 20,
        "blockNumber": 28147650,
        "transactionHash": "0x15780d2a69dac419607fb639fcac8d159d1bac06c1fe471c2be4334479255f66",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000004bdb8234ad81f26985d257f36a2d2d8c30365546",
          "0x000000000000000000000000be188d6641e8b680743a4815dfa0f6208038960f"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000a5d6d9515ec8e0000000000000000000000000000000000000000000000001b1d351b2c1884aa000000000000000000000000000000000000000000002568d54d55f776d07eda0000000000000000000000000000000000000000000000001b12d7ad9702981c000000000000000000000000000000000000000000002568d557b3650be66b68",
        "logIndex": 87,
        "blockHash": "0xea814f6d72ce8533b884c4f49c373b315a53ba5635bc99464bfa150dfd08b866"
      }
    ],
    "blockNumber": 28147650,
    "cumulativeGasUsed": "3755964",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4bdB8234AD81F26985d257F36a2d2d8c30365546",
    "0x50a8f5B877C2B2b3eeB32d35a33b0fC57bF61Bb5"
  ],
  "numDeployments": 1,
  "solcInputHash": "ac7e70281794acac69b888a78df6797a",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IWorldID\",\"name\":\"_worldId\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_membershipAddr\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidNullifier\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"new_price\",\"type\":\"uint256\"}],\"name\":\"MembershipPriceUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address[]\",\"name\":\"new_mods\",\"type\":\"address[]\"}],\"name\":\"ModsUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"NewMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"n_members\",\"type\":\"uint256\"}],\"name\":\"NewTeam\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"UserInfoURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMods\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"isMod\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"infoURI\",\"type\":\"string\"}],\"name\":\"joinWithEth\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"infoURI\",\"type\":\"string\"}],\"name\":\"joinWithoutEth\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"modLimit\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"mods\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_members\",\"type\":\"address[]\"}],\"name\":\"payForTeam\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newPrice\",\"type\":\"uint256\"}],\"name\":\"setMembershipPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"_newMods\",\"type\":\"address[]\"}],\"name\":\"setMods\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"usersPaid\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"worldId\":{\"details\":\"worldcoin verification*\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/LepakCore.sol\":\"LepakCore\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x24e0364e503a9bbde94c715d26573a76f14cd2a202d45f96f52134ab806b67b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Counters.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Counters.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title Counters\\n * @author Matt Condon (@shrugs)\\n * @dev Provides counters that can only be incremented, decremented or reset. This can be used e.g. to track the number\\n * of elements in a mapping, issuing ERC721 ids, or counting request ids.\\n *\\n * Include with `using Counters for Counters.Counter;`\\n */\\nlibrary Counters {\\n    struct Counter {\\n        // This variable should never be directly accessed by users of the library: interactions must be restricted to\\n        // the library's function. As of Solidity v0.5.2, this cannot be enforced, though there is a proposal to add\\n        // this feature: see https://github.com/ethereum/solidity/issues/4637\\n        uint256 _value; // default: 0\\n    }\\n\\n    function current(Counter storage counter) internal view returns (uint256) {\\n        return counter._value;\\n    }\\n\\n    function increment(Counter storage counter) internal {\\n        unchecked {\\n            counter._value += 1;\\n        }\\n    }\\n\\n    function decrement(Counter storage counter) internal {\\n        uint256 value = counter._value;\\n        require(value > 0, \\\"Counter: decrement overflow\\\");\\n        unchecked {\\n            counter._value = value - 1;\\n        }\\n    }\\n\\n    function reset(Counter storage counter) internal {\\n        counter._value = 0;\\n    }\\n}\\n\",\"keccak256\":\"0xf0018c2440fbe238dd3a8732fa8e17a0f9dce84d31451dc8a32f6d62b349c9f1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (utils/math/SafeMath.sol)\\n\\npragma solidity ^0.8.0;\\n\\n// CAUTION\\n// This version of SafeMath should only be used with Solidity 0.8 or later,\\n// because it relies on the compiler's built in overflow checks.\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations.\\n *\\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\\n * now has built in overflow checking.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a + b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a * b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b <= a, errorMessage);\\n            return a - b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a / b;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(\\n        uint256 a,\\n        uint256 b,\\n        string memory errorMessage\\n    ) internal pure returns (uint256) {\\n        unchecked {\\n            require(b > 0, errorMessage);\\n            return a % b;\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x0f633a0223d9a1dcccfcf38a64c9de0874dfcbfac0c6941ccf074d63a2ce0e1e\",\"license\":\"MIT\"},\"contracts/Interfaces/ILepakMembership.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\ninterface ILepakMembership {\\n    function provide(address _user) external;\\n    function revoke(address _user) external;\\n    function tokenURI(uint256 tokenId) external view;\\n    function setPriceEth(uint256 _newPrice) external;\\n    function updateThresholds(uint256[3] memory _newThresholds) external;\\n    function currentPriceEth() external view returns (uint256);\\n    function balanceOf(address _user) external view returns (uint256);\\n}\",\"keccak256\":\"0xb8aac81a5f22c31bce0e44271393d0592550d62fb4b5229a3fe0529738066409\"},\"contracts/Interfaces/IWorldId.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IWorldID {\\n    /// @notice Reverts if the zero-knowledge proof is invalid.\\n    /// @param root The of the Merkle tree\\n    /// @param groupId The id of the Semaphore group\\n    /// @param signalHash A keccak256 hash of the Semaphore signal\\n    /// @param nullifierHash The nullifier hash\\n    /// @param externalNullifierHash A keccak256 hash of the external nullifier\\n    /// @param proof The zero-knowledge proof\\n    /// @dev  Note that a double-signaling check is not included here, and should be carried by the caller.\\n    function verifyProof(\\n        uint256 root,\\n        uint256 groupId,\\n        uint256 signalHash,\\n        uint256 nullifierHash,\\n        uint256 externalNullifierHash,\\n        uint256[8] calldata proof\\n    ) external view;\\n}\",\"keccak256\":\"0x0e48b38618c0adf1de814097db7b6e99b549926948ea73214dda0539780f5fb0\",\"license\":\"MIT\"},\"contracts/LepakCore.sol\":{\"content\":\"pragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Counters.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/math/SafeMath.sol\\\";\\nimport { ByteHasher } from \\\"./helpers/ByteHasher.sol\\\";\\nimport { IWorldID } from \\\"./Interfaces/IWorldId.sol\\\";\\nimport { ILepakMembership } from \\\"./Interfaces/ILepakMembership.sol\\\";\\n\\nstruct shortProposal {\\n    address targetContract;\\n    string call;\\n}\\n\\ncontract LepakCore is Ownable{\\n    using ByteHasher for bytes;\\n    using SafeMath for uint256;\\n\\n    event NewMember(address member,uint256 fee);\\n    event NewTeam(uint256 n_members);\\n    event ModsUpdated(address[] new_mods);\\n    event MembershipPriceUpdated(uint256 new_price);\\n\\n    mapping(address => string) public UserInfoURI;\\n    mapping(address => bool) public usersPaid;\\n    mapping(address => bool) public isMod;\\n    uint8 public modLimit = 5;\\n    ILepakMembership membership;\\n    address[] public mods;\\n    \\n    /**\\n    ** @dev worldcoin verification\\n    **/\\n    \\n    IWorldID internal worldId;\\n    uint256 internal groupId = 1;\\n    mapping(uint256 => bool) internal nullifierHashes;\\n    error InvalidNullifier();\\n\\n    constructor(IWorldID _worldId, address _membershipAddr) {\\n        worldId = _worldId;\\n        membership = ILepakMembership(_membershipAddr);\\n    }\\n\\n    modifier onlyMod () {\\n        require (isMod[msg.sender], \\\"caller is not a moderator\\\");\\n        _;\\n    }\\n\\n    modifier onlyModOrOwner () {\\n        require (isMod[msg.sender] || super.owner() == msg.sender, \\\"caller is not a moderator or owner\\\");\\n        _;\\n    }\\n\\n    function payForTeam(address[] calldata _members) external payable {\\n        uint256 len = _members.length;     \\n        require(msg.value >= len.mul(membership.currentPriceEth()),\\\"Not enough funds\\\");\\n        for(uint i=0;i<len;i++){\\n            usersPaid[_members[i]] = true;\\n        }\\n        emit NewTeam(len);\\n    }\\n\\n    function joinWithoutEth(\\n        string memory infoURI\\n        // uint256 root,\\n        // uint256 nullifierHash,\\n        // uint256[8] calldata proof\\n    ) external {\\n        // require(usersPaid[msg.sender],\\\"user hasnt paid yet\\\");\\n        // _verifyPoP(infoURI,root,nullifierHash,proof);\\n        UserInfoURI[msg.sender] = infoURI;\\n        membership.provide(msg.sender);\\n        emit NewMember(msg.sender, membership.currentPriceEth());\\n    }\\n\\n    function joinWithEth(\\n        string memory infoURI\\n        // uint256 root,\\n        // uint256 nullifierHash,\\n        // uint256[8] calldata proof\\n    ) external payable {\\n        require(msg.value >= membership.currentPriceEth(),\\\"Not enough funds\\\");\\n        // _verifyPoP(infoURI,root,nullifierHash,proof);\\n        UserInfoURI[msg.sender] = infoURI;\\n        membership.provide(msg.sender);\\n        emit NewMember(msg.sender, msg.value);\\n    }\\n\\n    /**\\n    ** @dev worldcoin verification\\n    **/\\n\\n    function _verifyPoP(\\n        bytes32 infoURI,\\n        uint256 root,\\n        uint256 nullifierHash,\\n        uint256[8] calldata proof\\n    ) internal {\\n\\n        if (nullifierHashes[nullifierHash]) revert InvalidNullifier();\\n        worldId.verifyProof(\\n            root,\\n            groupId,\\n            abi.encodePacked(infoURI).hashToField(),\\n            nullifierHash,\\n            abi.encodePacked(address(this)).hashToField(),\\n            proof\\n        );\\n\\n        // finally, we record they've done this, so they can't do it again (proof of uniqueness)\\n        nullifierHashes[nullifierHash] = true;\\n\\n    }\\n\\n    function setMods(address[] calldata _newMods) external onlyOwner {\\n        uint256 len = _newMods.length;\\n        uint256 prev_len = mods.length;\\n        address[] memory temp = new address[](len);\\n\\n        require(len <= modLimit, \\\"max number of mods is 5\\\");\\n\\n        for(uint256 i=0;i<prev_len;i++){\\n            isMod[mods[i]] = false;\\n        }\\n        for(uint256 i=0;i<len;i++){\\n            temp[i] = (_newMods[i]);\\n            isMod[_newMods[i]] = true;\\n        }\\n        mods = temp;\\n\\n        emit ModsUpdated(temp);\\n\\n    }\\n    function setMembershipPrice(uint256 _newPrice) external  onlyModOrOwner {\\n        membership.setPriceEth(_newPrice);\\n        emit MembershipPriceUpdated(_newPrice);\\n    }\\n\\n    function getMods() external view returns (address[] memory){\\n        return mods;\\n    }\\n    function isMember(address _user) external view returns (bool){\\n        return (membership.balanceOf(_user) > uint256(0)\\n                || super.owner() == _user\\n                || isMod[_user]);\\n    }\\n}\",\"keccak256\":\"0xf4f2caf556246e71a8a3a462a82837c13d97b9a93dd30183a874231514e93e85\"},\"contracts/helpers/ByteHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nlibrary ByteHasher {\\n    /// @dev Creates a keccak256 hash of a bytestring.\\n    /// @param value The bytestring to hash\\n    /// @return The hash of the specified value\\n    /// @dev `>> 8` makes sure that the result is included in our field\\n    function hashToField(bytes memory value) internal pure returns (uint256) {\\n        return uint256(keccak256(abi.encodePacked(value))) >> 8;\\n    }\\n}\",\"keccak256\":\"0xdf7abea628f202e09d500fd6e1d27c6e900a088f2a79ae4870463d13fc888d65\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526004805460ff19166005179055600160075534801561002257600080fd5b506040516113a43803806113a4833981016040819052610041916100d9565b61004a33610089565b600680546001600160a01b039384166001600160a01b0319909116179055600480549190921661010002610100600160a81b031990911617905561012a565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b600080604083850312156100eb578182fd5b82516100f681610112565b602084015190925061010781610112565b809150509250929050565b6001600160a01b038116811461012757600080fd5b50565b61126b806101396000396000f3fe6080604052600436106100e85760003560e01c8063715018a61161008a578063c00af42c11610059578063c00af42c1461029d578063de718e62146102bd578063e07540e4146102d0578063f2fde38b146102f057600080fd5b8063715018a6146102065780638988b2841461021b5780638da5cb5b1461024b578063a230c5241461027d57600080fd5b806354e68454116100c657806354e68454146101665780635dcce7ed146101a657806366b9b563146101b957806369d5f38a146101e657600080fd5b80633b33ac32146100ed5780634d078f48146101185780634e1b8e4a14610144575b600080fd5b3480156100f957600080fd5b50610102610310565b60405161010f91906110bf565b60405180910390f35b34801561012457600080fd5b506004546101329060ff1681565b60405160ff909116815260200161010f565b34801561015057600080fd5b5061016461015f366004610fe5565b610372565b005b34801561017257600080fd5b50610196610181366004610f4e565b60026020526000908152604090205460ff1681565b604051901515815260200161010f565b6101646101b4366004610f75565b6104c4565b3480156101c557600080fd5b506101d96101d4366004610f4e565b61064d565b60405161010f919061110c565b3480156101f257600080fd5b5061016461020136600461108f565b6106e7565b34801561021257600080fd5b50610164610806565b34801561022757600080fd5b50610196610236366004610f4e565b60036020526000908152604090205460ff1681565b34801561025757600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161010f565b34801561028957600080fd5b50610196610298366004610f4e565b61083c565b3480156102a957600080fd5b506102656102b836600461108f565b61091b565b6101646102cb366004610fe5565b610945565b3480156102dc57600080fd5b506101646102eb366004610f75565b610ac7565b3480156102fc57600080fd5b5061016461030b366004610f4e565b610d62565b6060600580548060200260200160405190810160405280929190818152602001828054801561036857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161034a575b5050505050905090565b336000908152600160209081526040909120825161039292840190610e60565b5060048054604051631803aa3360e01b8152339281019290925261010090046001600160a01b031690631803aa3390602401600060405180830381600087803b1580156103de57600080fd5b505af11580156103f2573d6000803e3d6000fd5b505050507f7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c28333600460019054906101000a90046001600160a01b03166001600160a01b031663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046657600080fd5b505afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e91906110a7565b604080516001600160a01b0390931683526020830191909152015b60405180910390a150565b6004805460408051633904f8af60e21b81529051849361054d9361010090046001600160a01b03169263e413e2bc9281830192602092829003018186803b15801561050e57600080fd5b505afa158015610522573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054691906110a7565b8290610dfd565b3410156105945760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064015b60405180910390fd5b60005b81811015610614576001600260008686858181106105c557634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105da9190610f4e565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061060c816111ee565b915050610597565b506040518181527fa90ad43b37352ebc1e46954a3f2d064584b9afe4c9dbb1f88d191260e12a410e9060200160405180910390a1505050565b60016020526000908152604090208054610666906111b3565b80601f0160208091040260200160405190810160405280929190818152602001828054610692906111b3565b80156106df5780601f106106b4576101008083540402835291602001916106df565b820191906000526020600020905b8154815290600101906020018083116106c257829003601f168201915b505050505081565b3360009081526003602052604090205460ff168061071e5750336107136000546001600160a01b031690565b6001600160a01b0316145b6107755760405162461bcd60e51b815260206004820152602260248201527f63616c6c6572206973206e6f742061206d6f64657261746f72206f72206f776e60448201526132b960f11b606482015260840161058b565b600480546040516292758960e21b815291820183905261010090046001600160a01b031690630249d62490602401600060405180830381600087803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b505050507fe3b51bfc59d6e44e4da024e028d277b0284e6695cce36d919aea83e2c7de2843816040516104b991815260200190565b6000546001600160a01b031633146108305760405162461bcd60e51b815260040161058b9061115f565b61083a6000610e10565b565b600480546040516370a0823160e01b81526001600160a01b03848116938201939093526000928392610100900416906370a082319060240160206040518083038186803b15801561088c57600080fd5b505afa1580156108a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c491906110a7565b11806108f25750816001600160a01b03166108e76000546001600160a01b031690565b6001600160a01b0316145b8061091557506001600160a01b03821660009081526003602052604090205460ff165b92915050565b6005818154811061092b57600080fd5b6000918252602090912001546001600160a01b0316905081565b600460019054906101000a90046001600160a01b03166001600160a01b031663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099357600080fd5b505afa1580156109a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cb91906110a7565b341015610a0d5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b604482015260640161058b565b3360009081526001602090815260409091208251610a2d92840190610e60565b5060048054604051631803aa3360e01b8152339281019290925261010090046001600160a01b031690631803aa3390602401600060405180830381600087803b158015610a7957600080fd5b505af1158015610a8d573d6000803e3d6000fd5b5050604080513381523460208201527f7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c28393500190506104b9565b6000546001600160a01b03163314610af15760405162461bcd60e51b815260040161058b9061115f565b600554819060008267ffffffffffffffff811115610b1f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b48578160200160208202803683370190505b5060045490915060ff16831115610ba15760405162461bcd60e51b815260206004820152601760248201527f6d6178206e756d626572206f66206d6f64732069732035000000000000000000604482015260640161058b565b60005b82811015610c195760006003600060058481548110610bd357634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905580610c11816111ee565b915050610ba4565b5060005b83811015610d0f57858582818110610c4557634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c5a9190610f4e565b828281518110610c7a57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050600160036000888885818110610cc057634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610cd59190610f4e565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610d07816111ee565b915050610c1d565b508051610d23906005906020840190610ee4565b507f271382085bd3790c7702e021ba0fc6d8369de53f765d04ffcd8fd3c75cde0fea81604051610d5391906110bf565b60405180910390a15050505050565b6000546001600160a01b03163314610d8c5760405162461bcd60e51b815260040161058b9061115f565b6001600160a01b038116610df15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161058b565b610dfa81610e10565b50565b6000610e098284611194565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054610e6c906111b3565b90600052602060002090601f016020900481019282610e8e5760008555610ed4565b82601f10610ea757805160ff1916838001178555610ed4565b82800160010185558215610ed4579182015b82811115610ed4578251825591602001919060010190610eb9565b50610ee0929150610f39565b5090565b828054828255906000526020600020908101928215610ed4579160200282015b82811115610ed457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610f04565b5b80821115610ee05760008155600101610f3a565b600060208284031215610f5f578081fd5b81356001600160a01b0381168114610e09578182fd5b60008060208385031215610f87578081fd5b823567ffffffffffffffff80821115610f9e578283fd5b818501915085601f830112610fb1578283fd5b813581811115610fbf578384fd5b8660208260051b8501011115610fd3578384fd5b60209290920196919550909350505050565b600060208284031215610ff6578081fd5b813567ffffffffffffffff8082111561100d578283fd5b818401915084601f830112611020578283fd5b8135818111156110325761103261121f565b604051601f8201601f19908116603f0116810190838211818310171561105a5761105a61121f565b81604052828152876020848701011115611072578586fd5b826020860160208301379182016020019490945295945050505050565b6000602082840312156110a0578081fd5b5035919050565b6000602082840312156110b8578081fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b818110156111005783516001600160a01b0316835292840192918401916001016110db565b50909695505050505050565b6000602080835283518082850152825b818110156111385785810183015185820160400152820161111c565b818111156111495783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008160001904831182151516156111ae576111ae611209565b500290565b600181811c908216806111c757607f821691505b602082108114156111e857634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561120257611202611209565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220bc4bbd35e4ebae516f889aab7cde34b77a1c77f0f66cfac1a7124b21ffd1254664736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106100e85760003560e01c8063715018a61161008a578063c00af42c11610059578063c00af42c1461029d578063de718e62146102bd578063e07540e4146102d0578063f2fde38b146102f057600080fd5b8063715018a6146102065780638988b2841461021b5780638da5cb5b1461024b578063a230c5241461027d57600080fd5b806354e68454116100c657806354e68454146101665780635dcce7ed146101a657806366b9b563146101b957806369d5f38a146101e657600080fd5b80633b33ac32146100ed5780634d078f48146101185780634e1b8e4a14610144575b600080fd5b3480156100f957600080fd5b50610102610310565b60405161010f91906110bf565b60405180910390f35b34801561012457600080fd5b506004546101329060ff1681565b60405160ff909116815260200161010f565b34801561015057600080fd5b5061016461015f366004610fe5565b610372565b005b34801561017257600080fd5b50610196610181366004610f4e565b60026020526000908152604090205460ff1681565b604051901515815260200161010f565b6101646101b4366004610f75565b6104c4565b3480156101c557600080fd5b506101d96101d4366004610f4e565b61064d565b60405161010f919061110c565b3480156101f257600080fd5b5061016461020136600461108f565b6106e7565b34801561021257600080fd5b50610164610806565b34801561022757600080fd5b50610196610236366004610f4e565b60036020526000908152604090205460ff1681565b34801561025757600080fd5b506000546001600160a01b03165b6040516001600160a01b03909116815260200161010f565b34801561028957600080fd5b50610196610298366004610f4e565b61083c565b3480156102a957600080fd5b506102656102b836600461108f565b61091b565b6101646102cb366004610fe5565b610945565b3480156102dc57600080fd5b506101646102eb366004610f75565b610ac7565b3480156102fc57600080fd5b5061016461030b366004610f4e565b610d62565b6060600580548060200260200160405190810160405280929190818152602001828054801561036857602002820191906000526020600020905b81546001600160a01b0316815260019091019060200180831161034a575b5050505050905090565b336000908152600160209081526040909120825161039292840190610e60565b5060048054604051631803aa3360e01b8152339281019290925261010090046001600160a01b031690631803aa3390602401600060405180830381600087803b1580156103de57600080fd5b505af11580156103f2573d6000803e3d6000fd5b505050507f7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c28333600460019054906101000a90046001600160a01b03166001600160a01b031663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561046657600080fd5b505afa15801561047a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061049e91906110a7565b604080516001600160a01b0390931683526020830191909152015b60405180910390a150565b6004805460408051633904f8af60e21b81529051849361054d9361010090046001600160a01b03169263e413e2bc9281830192602092829003018186803b15801561050e57600080fd5b505afa158015610522573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061054691906110a7565b8290610dfd565b3410156105945760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b60448201526064015b60405180910390fd5b60005b81811015610614576001600260008686858181106105c557634e487b7160e01b600052603260045260246000fd5b90506020020160208101906105da9190610f4e565b6001600160a01b031681526020810191909152604001600020805460ff19169115159190911790558061060c816111ee565b915050610597565b506040518181527fa90ad43b37352ebc1e46954a3f2d064584b9afe4c9dbb1f88d191260e12a410e9060200160405180910390a1505050565b60016020526000908152604090208054610666906111b3565b80601f0160208091040260200160405190810160405280929190818152602001828054610692906111b3565b80156106df5780601f106106b4576101008083540402835291602001916106df565b820191906000526020600020905b8154815290600101906020018083116106c257829003601f168201915b505050505081565b3360009081526003602052604090205460ff168061071e5750336107136000546001600160a01b031690565b6001600160a01b0316145b6107755760405162461bcd60e51b815260206004820152602260248201527f63616c6c6572206973206e6f742061206d6f64657261746f72206f72206f776e60448201526132b960f11b606482015260840161058b565b600480546040516292758960e21b815291820183905261010090046001600160a01b031690630249d62490602401600060405180830381600087803b1580156107bd57600080fd5b505af11580156107d1573d6000803e3d6000fd5b505050507fe3b51bfc59d6e44e4da024e028d277b0284e6695cce36d919aea83e2c7de2843816040516104b991815260200190565b6000546001600160a01b031633146108305760405162461bcd60e51b815260040161058b9061115f565b61083a6000610e10565b565b600480546040516370a0823160e01b81526001600160a01b03848116938201939093526000928392610100900416906370a082319060240160206040518083038186803b15801561088c57600080fd5b505afa1580156108a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108c491906110a7565b11806108f25750816001600160a01b03166108e76000546001600160a01b031690565b6001600160a01b0316145b8061091557506001600160a01b03821660009081526003602052604090205460ff165b92915050565b6005818154811061092b57600080fd5b6000918252602090912001546001600160a01b0316905081565b600460019054906101000a90046001600160a01b03166001600160a01b031663e413e2bc6040518163ffffffff1660e01b815260040160206040518083038186803b15801561099357600080fd5b505afa1580156109a7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109cb91906110a7565b341015610a0d5760405162461bcd60e51b815260206004820152601060248201526f4e6f7420656e6f7567682066756e647360801b604482015260640161058b565b3360009081526001602090815260409091208251610a2d92840190610e60565b5060048054604051631803aa3360e01b8152339281019290925261010090046001600160a01b031690631803aa3390602401600060405180830381600087803b158015610a7957600080fd5b505af1158015610a8d573d6000803e3d6000fd5b5050604080513381523460208201527f7f48e4f7f3ef2c63408b16a799b8516cb879c145386aedd51a36938a02a1c28393500190506104b9565b6000546001600160a01b03163314610af15760405162461bcd60e51b815260040161058b9061115f565b600554819060008267ffffffffffffffff811115610b1f57634e487b7160e01b600052604160045260246000fd5b604051908082528060200260200182016040528015610b48578160200160208202803683370190505b5060045490915060ff16831115610ba15760405162461bcd60e51b815260206004820152601760248201527f6d6178206e756d626572206f66206d6f64732069732035000000000000000000604482015260640161058b565b60005b82811015610c195760006003600060058481548110610bd357634e487b7160e01b600052603260045260246000fd5b6000918252602080832091909101546001600160a01b031683528201929092526040019020805460ff191691151591909117905580610c11816111ee565b915050610ba4565b5060005b83811015610d0f57858582818110610c4557634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610c5a9190610f4e565b828281518110610c7a57634e487b7160e01b600052603260045260246000fd5b60200260200101906001600160a01b031690816001600160a01b031681525050600160036000888885818110610cc057634e487b7160e01b600052603260045260246000fd5b9050602002016020810190610cd59190610f4e565b6001600160a01b031681526020810191909152604001600020805460ff191691151591909117905580610d07816111ee565b915050610c1d565b508051610d23906005906020840190610ee4565b507f271382085bd3790c7702e021ba0fc6d8369de53f765d04ffcd8fd3c75cde0fea81604051610d5391906110bf565b60405180910390a15050505050565b6000546001600160a01b03163314610d8c5760405162461bcd60e51b815260040161058b9061115f565b6001600160a01b038116610df15760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b606482015260840161058b565b610dfa81610e10565b50565b6000610e098284611194565b9392505050565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b828054610e6c906111b3565b90600052602060002090601f016020900481019282610e8e5760008555610ed4565b82601f10610ea757805160ff1916838001178555610ed4565b82800160010185558215610ed4579182015b82811115610ed4578251825591602001919060010190610eb9565b50610ee0929150610f39565b5090565b828054828255906000526020600020908101928215610ed4579160200282015b82811115610ed457825182546001600160a01b0319166001600160a01b03909116178255602090920191600190910190610f04565b5b80821115610ee05760008155600101610f3a565b600060208284031215610f5f578081fd5b81356001600160a01b0381168114610e09578182fd5b60008060208385031215610f87578081fd5b823567ffffffffffffffff80821115610f9e578283fd5b818501915085601f830112610fb1578283fd5b813581811115610fbf578384fd5b8660208260051b8501011115610fd3578384fd5b60209290920196919550909350505050565b600060208284031215610ff6578081fd5b813567ffffffffffffffff8082111561100d578283fd5b818401915084601f830112611020578283fd5b8135818111156110325761103261121f565b604051601f8201601f19908116603f0116810190838211818310171561105a5761105a61121f565b81604052828152876020848701011115611072578586fd5b826020860160208301379182016020019490945295945050505050565b6000602082840312156110a0578081fd5b5035919050565b6000602082840312156110b8578081fd5b5051919050565b6020808252825182820181905260009190848201906040850190845b818110156111005783516001600160a01b0316835292840192918401916001016110db565b50909695505050505050565b6000602080835283518082850152825b818110156111385785810183015185820160400152820161111c565b818111156111495783604083870101525b50601f01601f1916929092016040019392505050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60008160001904831182151516156111ae576111ae611209565b500290565b600181811c908216806111c757607f821691505b602082108114156111e857634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561120257611202611209565b5060010190565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220bc4bbd35e4ebae516f889aab7cde34b77a1c77f0f66cfac1a7124b21ffd1254664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "worldId": {
        "details": "worldcoin verification*"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 3596,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "UserInfoURI",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_string_storage)"
      },
      {
        "astId": 3600,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "usersPaid",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3604,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "isMod",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3607,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "modLimit",
        "offset": 0,
        "slot": "4",
        "type": "t_uint8"
      },
      {
        "astId": 3610,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "membership",
        "offset": 1,
        "slot": "4",
        "type": "t_contract(ILepakMembership)3528"
      },
      {
        "astId": 3613,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "mods",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 3617,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "worldId",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(IWorldID)3549"
      },
      {
        "astId": 3620,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "groupId",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 3624,
        "contract": "contracts/LepakCore.sol:LepakCore",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_uint256,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(ILepakMembership)3528": {
        "encoding": "inplace",
        "label": "contract ILepakMembership",
        "numberOfBytes": "20"
      },
      "t_contract(IWorldID)3549": {
        "encoding": "inplace",
        "label": "contract IWorldID",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_bool)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}